--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shenyi.
--- DateTime: 2020/3/20 15:43
require "Framework/Scene/SceneConfig"
---@class SceneManager:Updatable
local SceneManager = BaseClass("SceneManager", Updatable)
--------------------------------------------------------------------------------------
local launchUI = CS.Game.LaunchUI
local loadManager = LoadManager
local uiManager = UIManager
local tipsManager = TipsManager

local MainCameraPath = "MainCamera"

-- 构造函数
function SceneManager:ctor()
    ---@private
    ---@type BaseScene
    self.current_scene = nil
    ---@private
    ---@type common_scene_scene
    self.scene_info = nil
    ---@private
    self.scene_config = SceneConfig.LaunchScene
    self.scenes = {}
    self.camera_go = CS.UnityEngine.GameObject.Find(MainCameraPath)
    --logError(self.camera_go.name)
end

---@return table
function SceneManager:GetSceneConfig()
    return self.scene_config
end

---@param scene_info common_scene_scene
---@param ... number 如果是主场景，第一个参数是map_id
function SceneManager:SwitchScene(scene_config, ...)
    if self.isLoading then return end
    self.isLoading = true
    local inLaunchScene = false
    if self.scene_config == SceneConfig.LaunchScene then
        inLaunchScene = true
    else
        uiManager:LoadView(UIConfig.LoadingUI)
    end

    uiManager:ClearAllUI()
    tipsManager:ClearAllTips()
    if self.current_scene then
        self.current_scene:Leave()
    end

    local sceneName = scene_config.Name
    if not self.scenes[sceneName] then
        self.scenes[sceneName] = scene_config.Type.New()
    end
    coroutine.Do(loadManager.Load,  scene_config.ShowLoading and ShowLoadProcess or nil, sceneName, nil)
    self.scene_config = scene_config
    self.current_scene = self.scenes[sceneName]
    self.current_scene:Prepare(...)
    if inLaunchScene then
        launchUI.Dispose()
    else
        uiManager:UnLoadView(UIConfig.LoadingUI)
    end
    self.current_scene:Enter()
    self.isLoading = false
end


-- 析构函数
function SceneManager:dtor()
    if self.current_scene then
        self.current_scene:Leave()
    end
    for _, scene in pairs(self.scenes) do
        scene:Delete()
    end
end

return SceneManager