--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by shenyi.
--- DateTime: 2020/3/20 15:43
--- 1.Tips 和ui的主要区别在于tips能打开多个
--- 2.Tips 的预制体名字必须以tips结尾
------------------------------------------------------------------------------------------------

---@class TipsManager:Updatable
local TipsManager = BaseClass("TipsManager", Updatable)
local luaUtils = LuaUtil
local commonUtil = CommonUtil
local resourceManager = ResourceManager

---@class UITipsClass
local UIConfigClass = {
    ---@type string UI名字
    Name = "",
    ---@type string UI预制体路径
    Path = "",
    ---@type string UI代码路径
    View = "",
}

function TipsManager:ctor()
    --self.root = commonUtil.FindTrans("Canvas/Notice")
    -----@type table<UITipsClass, table<number, UIBaseTips>>
    --self.tipsCache = {}
    -----@type table<UITipsClass, table<UIBaseTips, boolean>>
    --self.tipsInUse = {}
end

---@param config UITipsClass
function TipsManager:ShowTips(config, ...)
    ---@type UIBaseTips
    local tips
    local args = luaUtils.SafePack(...)
    local cache = self.tipsCache[config]

    if cache and next(cache) then
        tips = table.remove(cache)
    else
        local go = coroutine.Do(resourceManager.LuaLoadPrefab, nil, config.Path)
        local uiview = GameUtil.GetUIView(go)
        tips = require(config.View).New(uiview or go, config)
        commonUtil.SetParent(self.root.gameObject, go)
    end
    if not self.tipsInUse[config] then
        self.tipsInUse[config] = {}
    end
    self.tipsInUse[config][tips] = true
    tips:ShowTips(luaUtils.SafeUnpack(args))
end

---@param tips UIBaseTips
function TipsManager:Recycle(tips)
    tips:HideTips()
    self.tipsInUse[tips.config][tips] = nil
    local config = tips.config

    if not self.tipsCache[config] then
        self.tipsCache[config] = {}
    end
    table.insert(self.tipsCache[config], tips)
end

function TipsManager:ClearAllTips()
    --for _, map in pairs(self.tipsCache) do
    --    for _, tips in ipairs(map) do
    --        tips:Delete()
    --    end
    --end
    --self.tipsCache = {}
    --for _, map in pairs(self.tipsInUse) do
    --    for tips, _ in pairs(map) do
    --        tips:Delete()
    --    end
    --end
    --self.tipsInUse = {}
end

function TipsManager:dtor()
    --self:ClearAllTips()
end

return TipsManager
